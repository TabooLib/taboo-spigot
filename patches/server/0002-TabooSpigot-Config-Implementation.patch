From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kylepoops <62238380+Kylepoops@users.noreply.github.com>
Date: Thu, 23 Jun 2022 19:02:40 +0800
Subject: [PATCH] TabooSpigot Config Implementation


diff --git a/src/main/java/co/aikar/timings/TimingsExport.java b/src/main/java/co/aikar/timings/TimingsExport.java
index 06bff37e4c1fddd3be6343049a66787c63fb420c..0f838c491f0d182dbac012c1d15723ab7b28aa9d 100644
--- a/src/main/java/co/aikar/timings/TimingsExport.java
+++ b/src/main/java/co/aikar/timings/TimingsExport.java
@@ -241,7 +241,8 @@ public class TimingsExport extends Thread {
         parent.put("config", createObject(
             pair("spigot", mapAsJSON(Bukkit.spigot().getSpigotConfig(), null)),
             pair("bukkit", mapAsJSON(Bukkit.spigot().getBukkitConfig(), null)),
-            pair("paper", mapAsJSON(Bukkit.spigot().getPaperConfig(), null))
+            pair("paper", mapAsJSON(Bukkit.spigot().getPaperConfig(), null)),
+            pair("taboospigot", mapAsJSON(Bukkit.spigot().getTabooSpigotConfig(), null))
         ));
 
         new TimingsExport(listeners, parent, history).start();
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index aea18838a17fc52e1bf8cd84cd185565e6e2246d..13ac71a90e3e5d3beef3c9c510595dd41ed73ea0 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -1,24 +1,22 @@
 package net.minecraft.server.dedicated;
 
-import com.google.common.collect.Lists;
 import com.mojang.authlib.GameProfile;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.logging.LogUtils;
-import java.io.BufferedReader;
+
 import java.io.BufferedWriter;
+import java.io.File;
 import java.io.IOException;
-import java.io.InputStreamReader;
 import java.net.InetAddress;
 import java.net.Proxy;
-import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
 import java.nio.file.Path;
-import java.util.Collections;
-import java.util.List;
 import java.util.Locale;
 import java.util.Optional;
 import java.util.function.BooleanSupplier;
 import javax.annotation.Nullable;
+
+import ink.ptms.taboospigot.config.TabooSpigotConfig;
 import net.minecraft.DefaultUncaughtExceptionHandler;
 import net.minecraft.DefaultUncaughtExceptionHandlerWithName;
 import net.minecraft.SharedConstants;
@@ -185,7 +183,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         }
 
         // Paper start - detect running as root
-        if (io.papermc.paper.util.ServerEnvironment.userIsRootOrAdmin()) {
+        if (io.papermc.paper.util.ServerEnvironment.userIsRootOrAdmin() && !TabooSpigotConfig.ignoreSecurityManagerCheck) {
             DedicatedServer.LOGGER.warn("****************************");
             DedicatedServer.LOGGER.warn("YOU ARE RUNNING THIS SERVER AS AN ADMINISTRATIVE OR ROOT USER. THIS IS NOT ADVISED.");
             DedicatedServer.LOGGER.warn("YOU ARE OPENING YOURSELF UP TO POTENTIAL RISKS WHEN DOING THIS.");
@@ -227,6 +225,14 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         io.papermc.paper.brigadier.PaperBrigadierProviderImpl.INSTANCE.getClass(); // init PaperBrigadierProvider
         // Paper end
 
+        // TabooSpigot Start
+        try {
+            ink.ptms.taboospigot.config.TabooSpigotConfig.init((File) options.valueOf("taboospigot-settings"));
+        } catch (Exception e) {
+            DedicatedServer.LOGGER.error("Failed to load TabooSpigot config", e);
+            return false;
+        }
+
         this.setPvpAllowed(dedicatedserverproperties.pvp);
         this.setFlightAllowed(dedicatedserverproperties.allowFlight);
         this.setMotd(dedicatedserverproperties.motd);
@@ -279,7 +285,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         server.enablePlugins(org.bukkit.plugin.PluginLoadOrder.STARTUP);
         // CraftBukkit end
 
-        if (!this.usesAuthentication()) {
+        if (!this.usesAuthentication() && !TabooSpigotConfig.ignoreOfflineModeNotify) {
             DedicatedServer.LOGGER.warn("**** SERVER IS RUNNING IN OFFLINE/INSECURE MODE!");
             DedicatedServer.LOGGER.warn("The server will make no attempt to authenticate usernames. Beware.");
             // Spigot start
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 0d1217eac9b68e0c3c4c6953293c5d4bfe97e71c..e2f10df50a73e65f845c0648f0d18463025d2916 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -2716,6 +2716,12 @@ public final class CraftServer implements Server {
             return CraftServer.this.console.paperConfigurations.createLegacyObject(CraftServer.this.console);
         }
 
+        @Override
+        public YamlConfiguration getTabooSpigotConfig()
+        {
+            return ink.ptms.taboospigot.config.TabooSpigotConfig.config;
+        }
+
         @Override
         public void restart() {
             org.spigotmc.RestartCommand.restart();
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index 1b9e91b20dd9a9375a0a2a6a4d7a0bcdce9e7b1a..e284e87082d56612e3415957e34d7ade4b554209 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -151,6 +151,12 @@ public class Main {
                         .defaultsTo(new File("paper.yml"))
                         .describedAs("Yml file");
 
+                acceptsAll(asList("taboospigot", "taboospigot-settings"), "File for TabooSpigot settings")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("taboospigot.yml"))
+                        .describedAs("Yml file");
+
                 acceptsAll(asList("add-plugin", "add-extra-plugin-jar"), "Specify paths to extra plugin jars to be loaded in addition to those in the plugins folder. This argument can be specified multiple times, once for each extra plugin jar path.")
                         .withRequiredArg()
                         .ofType(File.class)
